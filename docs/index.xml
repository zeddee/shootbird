<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ShootBird</title>
    <link>https://www.shootbird.work/</link>
    <description>Recent content on ShootBird</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Dec 2018 01:30:26 +0800</lastBuildDate>
    
	<atom:link href="https://www.shootbird.work/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>I ❤️ Go: Types and Structs</title>
      <link>https://www.shootbird.work/posts/i-love-go-structs/</link>
      <pubDate>Fri, 14 Dec 2018 01:30:26 +0800</pubDate>
      
      <guid>https://www.shootbird.work/posts/i-love-go-structs/</guid>
      <description>Table of Contents 1. Why types are important 2. Custom Types 3. Structs 4. Going deeper 5. Postscript   I&amp;#8217;d like to take a moment here and talk about how much I love Go&amp;#8217;s type system, and more importantly, how Go&amp;#8217;s struct type has changed my life.
 1. Why types are important   Go is a statically-typed language.
  This means that you have to define the data type of each variable you use in your code.</description>
    </item>
    
    <item>
      <title>Workblogging: Blockchain Basics</title>
      <link>https://www.shootbird.work/posts/workblogging-blockchain-basics/</link>
      <pubDate>Thu, 13 Dec 2018 03:12:33 +0800</pubDate>
      
      <guid>https://www.shootbird.work/posts/workblogging-blockchain-basics/</guid>
      <description>For some reason, I&amp;#8217;ve found myself elbow-deep in Ethereum&amp;#8217;s geth Github repository and am googling the finer points of token issuance and &#34;where does Bitcoin come from&#34;.
 In an effort to stay sane and make sure that if things fall out of my head, some of those things can be at least found here where future-me can point to and say &#34;hey, you looked this up&#34;, I&amp;#8217;m writing what I&amp;#8217;ve found so far here.</description>
    </item>
    
    <item>
      <title>How to ask questions about an AI/ML claim</title>
      <link>https://www.shootbird.work/posts/how-to-ask-questions-about-ai-ml/</link>
      <pubDate>Fri, 07 Dec 2018 01:05:56 +0800</pubDate>
      
      <guid>https://www.shootbird.work/posts/how-to-ask-questions-about-ai-ml/</guid>
      <description>AI is not magic. Movies have overwrought this idea that we&amp;#8217;re making tiny microprocessor equivalents of the human brain that can talk, think, and act like us. But the reality is quite different.
 Here, I&amp;#8217;ll cover how to question an AI/ML claim, because the hardest part about asking questions about a subject is knowing where to start. Hopefully, this would provide you with better tooling with which to think about AI/ML and move past outdated movie tropes.</description>
    </item>
    
    <item>
      <title>Examples of Github Hosted Sites</title>
      <link>https://www.shootbird.work/posts/examples-of-github-hosted-sites/</link>
      <pubDate>Tue, 04 Dec 2018 13:49:44 +0800</pubDate>
      
      <guid>https://www.shootbird.work/posts/examples-of-github-hosted-sites/</guid>
      <description>Table of Contents 1. Github natively displays Markdown and similar text formats 2. It&amp;#8217;s great for low maintenance content 3. You can publish interactive content Takeaways   Earlier, I wrote a piece on how to quickly publish a site to surge.sh and keep 100% control over your content. In it, I also mentioned that you can publish to Github using their Github pages feature.
 I&amp;#8217;m writing a separate post on this because I want to show how powerful a publishing tool it is.</description>
    </item>
    
    <item>
      <title>Quick n&#39; Dirty Web Publishing; or Don&#39;t Publish with a Site Builder</title>
      <link>https://www.shootbird.work/posts/quick-n-dirty-publishing/</link>
      <pubDate>Tue, 04 Dec 2018 12:26:38 +0800</pubDate>
      
      <guid>https://www.shootbird.work/posts/quick-n-dirty-publishing/</guid>
      <description>Table of Contents What is surge.sh Install your tools Create a simple HTML document Deploy Update Caveat Emptor Other tools and further reading Takeaways   I&amp;#8217;ve had more than one friend has asked me to move stuff out of their SquareSpace sites, and each time I give them the same response: ¯\_(ツ)_/¯
   Tip  I&amp;#8217;ve written a follow-up post on example of sites that are published using SSGs on Github pages here: https://www.</description>
    </item>
    
    <item>
      <title>Struggling with complexity</title>
      <link>https://www.shootbird.work/posts/struggling-with-complexity/</link>
      <pubDate>Fri, 30 Nov 2018 00:42:53 +0800</pubDate>
      
      <guid>https://www.shootbird.work/posts/struggling-with-complexity/</guid>
      <description>One of the things I constantly struggle with is managing complexity in writing. Write too complex a piece, and it&amp;#8217;ll sit there unread and unused. But stripping away complexity also strips away meaning, and risks context collapse (which I want to deal with soon).
 Stanford University&amp;#8217;s Prof. Robert Sapolsky seems to manage this balance between complexity and accessibility in his course &#34;BIO150, Introduction to Human Behavioural Biology&#34;, available on YouTube.</description>
    </item>
    
    <item>
      <title>Getting Stuff Out of a Todo App Like Clear</title>
      <link>https://www.shootbird.work/posts/getting-stuff-out-of-a-todo-app/</link>
      <pubDate>Wed, 21 Nov 2018 23:14:41 +0800</pubDate>
      
      <guid>https://www.shootbird.work/posts/getting-stuff-out-of-a-todo-app/</guid>
      <description>Table of Contents 1. What&amp;#8217;s Clear? 2. Explaining SQLite 3. Why write a program to get the data out? 4. Getting started 5. Checking your .sqlite file 6. Writing your Go program 6.1. Connect to the SQLite database 6.2. Get column headings from a table 6.3. Get column data types 6.4. Read data from the database   7. Postscript and the Why    Figure 1. Clear app.  One frustration I&amp;#8217;ve had with task list applications on iOS and macOS is that they tend to hide where they store the data you&amp;#8217;ve saved on it.</description>
    </item>
    
    <item>
      <title>Unpacking Westworld S2E10</title>
      <link>https://www.shootbird.work/posts/westworld-s2e10/</link>
      <pubDate>Mon, 12 Nov 2018 03:39:20 +0800</pubDate>
      
      <guid>https://www.shootbird.work/posts/westworld-s2e10/</guid>
      <description>I&amp;rsquo;m skipping the rest of Westworld S2 because it&amp;rsquo;s turned out to be a fairly straightforward season, and instead am going to focus on what its finale did. S2E10 very neatly ties off the narrative threads that it starts off, even explaining Bernard&amp;rsquo;s fragmented experience of time as a safety mechanism that he&amp;rsquo;s written into his own code to prevent anyone (even himself) from deciphering his memories.
I think S2E10 not only serves as a fitting ending for the season, but also brings up several important points.</description>
    </item>
    
    <item>
      <title>Learn How to Use Terminal</title>
      <link>https://www.shootbird.work/posts/learn-how-to-use-terminal/</link>
      <pubDate>Thu, 01 Nov 2018 05:10:02 +0800</pubDate>
      
      <guid>https://www.shootbird.work/posts/learn-how-to-use-terminal/</guid>
      <description>Table of Contents Overview Precision + Speed Quickly Copy+Paste Stuff Download YouTube videos Conclusion    Figure 1. Scary Computer Stuff (or How I Learnt to Stop Worrying and Love the Terminal).  Overview The terminal (and it&amp;#8217;s Windows counterparts, the Command Prompt and PowerShell) are terrifying to behold if you have no idea what you&amp;#8217;re doing. In When to Start Naming Things, we&amp;#8217;ve talked about text labels and design conventions in graphic interfaces.</description>
    </item>
    
    <item>
      <title>When to Start Naming Things</title>
      <link>https://www.shootbird.work/posts/when-to-start-naming-things/</link>
      <pubDate>Thu, 01 Nov 2018 04:21:08 +0800</pubDate>
      
      <guid>https://www.shootbird.work/posts/when-to-start-naming-things/</guid>
      <description>First rule of magic: Don&amp;rsquo;t let anyone know your real name. Names have power.1
 Microcopy isn&amp;rsquo;t usually at the top of the list when it comes to developing interfaces — button text is usually straightforward when it comes to the nondescript &amp;ldquo;OK&amp;rdquo;/&amp;ldquo;Cancel&amp;rdquo;, &amp;ldquo;Confirm&amp;rdquo; or &amp;ldquo;Save&amp;rdquo;. In fact, given the high rate of smartphone penetration, the value of screen real-estate favours use of iconography over text to communicate functionality.</description>
    </item>
    
    <item>
      <title>Why Technical Documentation?</title>
      <link>https://www.shootbird.work/posts/why-technical-documentation/</link>
      <pubDate>Tue, 23 Oct 2018 23:42:28 +0800</pubDate>
      
      <guid>https://www.shootbird.work/posts/why-technical-documentation/</guid>
      <description>A technical writer asks questions and writes stuff down. This is more difficult than it sounds — allow me to demonstrate:
 Imagine that you&amp;#8217;ve started work at a café.
 On your first week there, you learn how the coffee machine works: where the beans go, how often it needs to be cleaned. In the middle of that week, you learn which customers are friendly, and who are not. You learn that the coffee machine has a quirk — every tenth pour will give you half the coffee that it usually does.</description>
    </item>
    
    <item>
      <title>Services</title>
      <link>https://www.shootbird.work/hire-us/</link>
      <pubDate>Tue, 23 Oct 2018 23:29:43 +0800</pubDate>
      
      <guid>https://www.shootbird.work/hire-us/</guid>
      <description>Hire us. We can help you:
 Build out your software documentation from scratch. We establish your documentation beachhead. You decide how you want to maintain it. Edit and organize your docs. Users not finding the information they need, even if it&amp;rsquo;s already available? We can help you to edit and structure your documents so that important information is always easy to find. Write user-centric help. Soothe frustrated customers with docs or knowledge base articles that quickly help them solve problems.</description>
    </item>
    
    <item>
      <title>What Is ShootBird?</title>
      <link>https://www.shootbird.work/what-is-shootbird/</link>
      <pubDate>Mon, 22 Oct 2018 17:54:04 +0800</pubDate>
      
      <guid>https://www.shootbird.work/what-is-shootbird/</guid>
      <description>Zed is a documentarian who has worked with software companies to produce end-user and developer documentation, as well as helped keep their developers sane by writing stuff down for them. He also writes here about design, software, and ethics.
While not formally trained as a software developer, he&amp;rsquo;s been thrown (by well-meaning colleagues and himself mostly) into enough development-heavy projects that has made him fluent in dev-speak, and holds his own when writing about technical subjects in a human-friendly manner.</description>
    </item>
    
  </channel>
</rss>